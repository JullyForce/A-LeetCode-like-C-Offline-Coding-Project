//
//  main.cpp
//  Algorithms
//
//  Created by Jun Chen on 5/5/24.
//

#include <fstream>
#include "TestExec/TestExecutor.hpp"
#include "LeetCode/LC1521.hpp"
#include "LeetCode/LC100283.hpp"
#include "LeetCode/LC100312.hpp"
#include "LeetCode/LC100308.hpp"
#include "LeetCode/LC100314.hpp"
#include "LeetCode/LC100306.hpp"
#include "LeetCode/LC100311.hpp"
#include "LeetCode/LC3161.hpp"

int main(int argc, const char * argv[]) {
    LC3161::Solution2 sol;
//    LC1521::Solution sol;
//    LC100311::Solution sol;
//    LC100314::Solution sol;
//    LC100308:: Solution sol;
//    LC100312::Solution sol;
//    string testInput("oionssonoi");
//    string testInput("abba");
//    cout << sol.minAnagramLength(testInput) << endl;
//    vector<int> testInput{1, 0, 2};
//    vector<int> out = sol.findPermutation(testInput);
//    vector<int> testInput{4,3,1,6};
//    vector<vector<int>> testQuery{{0,2},{2,3}};
//    vector<bool> out = sol.isArraySpecial(testInput, testQuery);
//    vector<vector<int>> queries;
//    queries.push_back(vector<int>{1,2});
//    queries.push_back(vector<int>{2,3,3});
//    queries.push_back(vector<int>{2,3,1});
//    queries.push_back(vector<int>{2,2,2});
//    vector<bool> out = sol.getResults(queries);
//    LC100306::Solution sol;
//    std::function<int (vector<int>, vector<vector<int>>)> testFcn = [&sol] (vector<int> testIn, vector<vector<int>> testQueries) -> int {return sol.maximumSumSubsequence(testIn, testQueries);};
//    cout << ExecuteTest(testFcn, "Resources/LC100306.txt");
//    vector<int> testInput{3,-3,3,-1,-3,2,-1};
//    vector<vector<int>> testQueries{{2,-1},{2,3},{4,3},{2,1},{4,3},{6,-3},{1,0},{2,3}};
//    cout << sol.maximumSumSubsequence(testInput, testQueries) << endl;
//    vector<int> testInput{13,2,66,52,59};
//    cout << sol.closestToTarget(testInput, 38);
//    vector<vector<int>> testInput{{1,6}};
//    cout << sol.countDays(6, testInput);
//    for (int x : out) {
//        cout << x << " ";
//    }
//    vector<vector<int>> testInput{{1,2},{2,3,3},{2,3,1},{2,2,2}};
//    vector<vector<int>> testInput{{1,1},{1,11},{1,4},{1,8},{2,13,7}};
//    vector<vector<int>> testInput{{1,1},{2,4,3}};
    std::function<vector<bool> (vector<vector<int>>)> testFcn = [&sol] (vector<vector<int>> testIn) -> vector<bool> {return sol.getResults(testIn);};
    return ExecuteTest(testFcn, "Resources/LC3161.txt");
//    for (bool v : sol.getResults(testInput))
//        cout << v << ' ';
//    cout << endl;

//    stringstream ss;
//    ss << "{[1,2]}" << "," << "{[[1,2],[2,3],[4,5]]}";
//    
//    json jTest = json::parse(ss);
    
//    vector<vector<int>> a = jTest.template get<vector<vector<int>>>();
//    cout << a.size() << endl;
//    cout << a[0].size() << endl;
//    for (auto r : a) {
//        cout << endl;
//        for (int e : r) {
//            cout << e << ' ';
//        }
//    }
//    cout << "num jsons: " << jTest.size();

//    return 0;
}
